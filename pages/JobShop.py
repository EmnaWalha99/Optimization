import streamlit as st
import matplotlib.pyplot as plt
from gurobipy import Model, GRB
import time

# Function to plot the Gantt chart
def plot_gantt_streamlit(jobs_data, schedule, num_machines):
    fig, ax = plt.subplots(figsize=(10, 6))

    for machine in range(num_machines):
        for job, task, start, duration in schedule[machine]:
            ax.barh(machine, duration, left=start, align='center', color=f"C{job}", edgecolor='black')
            ax.text(start + duration / 2, machine, f"J{job}T{task}",
                    ha='center', va='center', color='white')

    ax.set_yticks(range(num_machines))
    ax.set_yticklabels([f"Machine {i + 1}" for i in range(num_machines)])  # Adjust to start from 1
    ax.set_xlabel("Temps")
    ax.set_title("Diagramme de Gantt - Planification des Travaux")
    st.pyplot(fig)

# Streamlit App for Job Shop Scheduling
def main():
    st.set_page_config(page_title="Planification des Travaux", layout="wide", initial_sidebar_state="expanded")

    st.title("üìä Planification des Travaux")

    # Sidebar Inputs
    with st.sidebar:
        st.header("üìã Param√®tres d'Entr√©e")

        # Number of jobs and machines
        num_jobs = st.number_input("Nombre de Travaux (√† partir de 1)", min_value=1, value=2, step=1)
        num_machines = st.number_input("Nombre de Machines (√† partir de 1)", min_value=1, value=3, step=1)

        # Job tasks input
        st.header("üîß T√¢ches des Travaux")
        jobs_data = []
        for job_id in range(num_jobs):
            with st.expander(f"Travail {job_id + 1}"):  # Adjust to show 1-based indexing
                tasks = []
                num_tasks = st.number_input(f"Nombre de t√¢ches pour le Travail {job_id + 1}", min_value=1, value=2, step=1, key=f"num_tasks_{job_id}")
                for task_id in range(num_tasks):
                    machine = st.number_input(f"T√¢che {task_id + 1} Machine", min_value=1, max_value=num_machines, value=1, step=1, key=f"machine_{job_id}_{task_id}")
                    duration = st.number_input(f"T√¢che {task_id + 1} Dur√©e", min_value=1, value=1, step=1, key=f"duration_{job_id}_{task_id}")
                    tasks.append((machine - 1, duration))  # Convert to 0-based indexing
                jobs_data.append(tasks)

    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("üìà R√©sultats de l'Optimisation")
        if st.button("Optimiser üöÄ"):
            try:
                # Horizon calculation
                horizon = sum(task[1] for job in jobs_data for task in job)

                # Model initialization
                model = Model("JobShop")

                # Decision variables
                start_vars = {}
                for job_id, job in enumerate(jobs_data):
                    for task_id, (machine, duration) in enumerate(job):
                        start_vars[job_id, task_id] = model.addVar(vtype=GRB.INTEGER, name=f"start_{job_id}_{task_id}")

                # Makespan variable
                makespan = model.addVar(vtype=GRB.INTEGER, name="makespan")

                # Constraints
                # 1. Precedence constraints within jobs
                for job_id, job in enumerate(jobs_data):
                    for task_id in range(len(job) - 1):
                        model.addConstr(
                            start_vars[job_id, task_id + 1] >= start_vars[job_id, task_id] + job[task_id][1],
                            name=f"precedence_{job_id}_{task_id}"
                        )

                # 2. No overlap constraints on machines
                for machine in range(num_machines):
                    machine_tasks = []
                    for job_id, job in enumerate(jobs_data):
                        for task_id, (task_machine, duration) in enumerate(job):
                            if task_machine == machine:
                                machine_tasks.append((job_id, task_id, duration))

                    for i, (job1, task1, dur1) in enumerate(machine_tasks):
                        for j, (job2, task2, dur2) in enumerate(machine_tasks):
                            if i < j:
                                z = model.addVar(vtype=GRB.BINARY, name=f"order_{job1}_{task1}_{job2}_{task2}")
                                model.addConstr(
                                    start_vars[job1, task1] + dur1 <= start_vars[job2, task2] + horizon * (1 - z),
                                    name=f"no_overlap_1_{job1}_{task1}_{job2}_{task2}"
                                )
                                model.addConstr(
                                    start_vars[job2, task2] + dur2 <= start_vars[job1, task1] + horizon * z,
                                    name=f"no_overlap_2_{job1}_{task1}_{job2}_{task2}"
                                )

                # 3. Makespan constraints
                for job_id, job in enumerate(jobs_data):
                    model.addConstr(
                        makespan >= start_vars[job_id, len(job) - 1] + job[-1][1],
                        name=f"makespan_job_{job_id}"
                    )

                # Objective: Minimize the makespan
                model.setObjective(makespan, GRB.MINIMIZE)

                # Solve the model
                with st.spinner("Optimisation en cours..."):
                    start_time = time.time()
                    model.optimize()
                    end_time = time.time()

                if model.status == GRB.OPTIMAL:
                    st.success("‚úÖ Solution optimale trouv√©e !")
                    st.metric("Makespan optimal", f"{makespan.X}")
                    st.metric("Temps de solution (s)", f"{end_time - start_time:.2f}")

                    # Extract schedule
                    schedule = {machine: [] for machine in range(num_machines)}
                    for job_id, job in enumerate(jobs_data):
                        for task_id, (machine, duration) in enumerate(job):
                            start_time = start_vars[job_id, task_id].X
                            schedule[machine].append((job_id, task_id, start_time, duration))

                    # Sort tasks by start time for each machine
                    for machine in schedule:
                        schedule[machine].sort(key=lambda x: x[2])

                    # Plot Gantt chart
                    plot_gantt_streamlit(jobs_data, schedule, num_machines)
                else:
                    st.error("‚ùå Aucune solution optimale trouv√©e.")

            except Exception as e:
                st.error(f"Erreur: {str(e)}")

    with col2:
        with st.expander("‚ÑπÔ∏è Instructions"):
            st.write("""
            - Utilisez la barre lat√©rale pour entrer le nombre de travaux, de machines et les d√©tails des t√¢ches.
            - Cliquez sur le bouton 'Optimiser' pour r√©soudre le probl√®me de planification.
            - Le programme affichera le planning optimal et le diagramme de Gantt.
            """)
        with st.expander("üìú Contraintes"):
            st.write(
                """
                - üîó **Ex√©cution Cons√©cutive des T√¢ches** : Deux t√¢ches sp√©cifi√©es doivent √™tre ex√©cut√©es cons√©cutivement, c'est-√†-dire que l'heure de d√©but de la deuxi√®me t√¢che doit imm√©diatement suivre la fin de la premi√®re t√¢che.
        
                - üö´ **T√¢ches Non-Empi√©tant sur la M√™me Machine** : Aucune t√¢che affect√©e √† une machine ne peut chevaucher une autre t√¢che. Les t√¢ches sont programm√©es de mani√®re s√©quentielle sur une machine.
        
                - ‚è≥ **Contraintes de Pr√©c√©dence** : Une t√¢che doit √™tre termin√©e avant que la t√¢che suivante puisse commencer, si elle d√©pend du r√©sultat de la premi√®re t√¢che.
        
                - ‚öôÔ∏è **Disponibilit√© des Machines** : Chaque machine peut traiter une seule t√¢che √† la fois.
        
                - ‚è≤Ô∏è **Dur√©es de Traitement Fixes** : Les t√¢ches ont des dur√©es pr√©-d√©finies qui ne peuvent pas √™tre modifi√©es lors de la planification.
        
                - üõ†Ô∏è **Affectation des T√¢ches** : Chaque t√¢che est affect√©e √† une machine sp√©cifique, comme sp√©cifi√© dans les entr√©es du probl√®me.
        
                - üïí **Makespan Minimis√©** : Le mod√®le minimise le temps total n√©cessaire pour accomplir toutes les t√¢ches (makespan).
                """
            )

if __name__ == "__main__":
    main()
